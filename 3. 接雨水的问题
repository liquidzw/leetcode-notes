给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。


上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。

class Solution {
public:
    int trap(vector<int>& height) {
        int i;
        int j;
        int re = 0;
        int k;
        int max_left = height[0];
        int max_right = height[height.size()-1];
        if (height.size() <= 3) return 0;
        
        for(i = 1;i < height.size()-1;i++)
        {
            max_right = height[height.size()-1];
            if(height[i] >= max_left)
                max_left = height[i];
            else
            {
                for(j = height.size()-1;j>=i;j--)
                {
                    if(height[j]>max_right)
                        max_right = height[j];
                }
                k = min(max_left,max_right)-height[i];
                re = re + k;
            }
        }
        return re;  
    }
};

上面是我敲得代码，检查了很久，测试可以通过，但是提交不了，我怀疑是在遇到边缘的值时出现了问题。
参考别人的答案。
思路应该是一样的，这里他使用了一个vector<int> left_max(size)的容器，把所有值的左边的最大值和右边的最大值都存入了容器之中。
于是最后用一次遍历就可以了，这样子时间复杂度只有O(n)。

算法：
  找到数组中从下标 i 到最左端最高的条形块高度 \text{left\_max}left_max。
  找到数组中从下标 i 到最右端最高的条形块高度 \text{right\_max}right_max。
  扫描数组 \text{height}height 并更新答案：
  累加 \min(\text{max\_left}[i],\text{max\_right}[i]) - \text{height}[i]min(max_left[i],max_right[i])−height[i] 到 ansans 上
  int trap(vector<int>& height)
{
	if(height == null)
		return 0;
    int ans = 0;
    int size = height.size();
    vector<int> left_max(size), right_max(size);
    left_max[0] = height[0];
    for (int i = 1; i < size; i++) {
        left_max[i] = max(height[i], left_max[i - 1]);
    }
    right_max[size - 1] = height[size - 1];
    for (int i = size - 2; i >= 0; i--) {
        right_max[i] = max(height[i], right_max[i + 1]);
    }
    for (int i = 1; i < size - 1; i++) {
        ans += min(left_max[i], right_max[i]) - height[i];
    }
    return ans;
}

